{spawn} = require 'child_process'
db = require './database/cakeshowDB'
upgrader = require './database/upgrade_db'

option '-r', '--replace', 'replace existing Cakeshow database'
option '-m', '--mysql [PATH]', 'specify MySQL install directory'
option '-u', '--user [USER]', 'specify MySQL username'
option '-p', '--password [PASSWORD]', 'specify MySQL password'
option '-v', '--verbose', 'print verbose output'
option '-c', '--compile', 'compile coffeescript before running'

class ExitHandler
	constructor: (options, onSuccess) ->
		this.onSuccess = onSuccess
	
	onExit: (status) => 
		process.exit(1) if status != 0
		if this.onSuccess? and typeof this.onSuccess is 'function'
			this.onSuccess(this.options) 

childEnv = (options) ->
	env = process.env
	
	if options.mysql? and process.platform == 'darwin'
		env['DYLD_LIBRARY_PATH'] = options.mysql + "/lib:" + process.env['DYLD_LIBRARY_PATH']
	
	return env
	
redirect = (proc) ->
	proc.stderr.pipe(process.stderr)
	proc.stdout.pipe(process.stdout)
	return proc

mysql = (options, args = []) ->
	if options.mysql?
		command = options.mysql + '/bin/mysql'
	else
		command = 'mysql'
	
	arguments = []
	
	if options.user?
		arguments = arguments.concat(['-u', options.user])
	
	if options.password?
		arguments = arguments.concat(['-p', options.password])
		
	if options.verbose?
		arguments.push('--verbose')
	
	env = childEnv(options)
		
	return redirect(spawn(command, arguments.concat(args)), { env: env })

coffee = (script, args, options) ->
	if options?
		env = childEnv(options)
	
	return redirect(spawn('coffee', [script].concat(args), {env: env}))

runSqlScript = (options, script, onSuccess) ->
	handler = new ExitHandler(options, onSuccess)
	
	sqlProc = mysql(options, ['-e', 'source ' + script])
	
	sqlProc.on('exit', handler.onExit)

createCakeshowDB = (options, onSuccess = ->) ->
	db.connect(options.user, options.password)
	
	if( options.replace? )
		console.log('Overwriting previous DB')
		db.cakeshowDB.drop().success( ->
			db.cakeshowDB.sync()
				.success(onSuccess)
				.error( (error) ->
					console.log('Error creating DB: ' + error)
				)
		).error( (error) ->
			console.log('Error removing old DB: ' + error)
		)
	else
		db.cakeshowDB.sync()
			.success(onSuccess)
			.error( (error) ->
				console.log('Error creating DB: ' + error)
			)

migrateData = (options, onSuccess) ->
	console.log('Migrating data')
	
	upgrader.upgrade()
	
task 'olddb', 'Create old database from backup', (options) ->
	runSqlScript(options, 'database/create_old_dbs.sql')

task 'create', 'Create cakeshow database', (options) ->
	createCakeshowDB(options)

task 'migrate', 'Migrate data into the new Cakeshow DB', (options) ->
	createCakeshowDB(options, migrateData)

task 'serve', 'Serve Cakeshow', (options) ->
	createCakeshowDB(options, ->
		coffee('cakeshow.coffee', [], options)
	)
